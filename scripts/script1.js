/* -- Mobile Nav Toggle -- */

const nav = document.querySelector("nav");

const handleNavToggle = () => {  
  nav.dataset.transitionable = "true";
  
  nav.dataset.toggled = nav.dataset.toggled === "true" ? "false" : "true";
}

window.matchMedia("(max-width: 800px)").onchange = e => {
  nav.dataset.transitionable = "false";

  nav.dataset.toggled = "false";
};

// forms
function navigate() {
  var branch = document.getElementById("branch").value;
  var semester = document.getElementById("semester").value;

  const baseUrl = `./${branch}-${semester}.html`;
  window.location = baseUrl;
  /*The new URL is constructed by concatenating the current URL
  of the page with the newly constructed URL. The newly constructed
  URL will be added to the end of the current URL, separated by a forward slash (/) character. */ 
}

// sanity
let PROJECT_ID = "jbb9mv51";
let DATASET = "production";

let QUERY = encodeURIComponent('*[_type == "pdfs"]{name, type, file, description, "pdfUrl": file.asset->url}');
let URL = `https://${PROJECT_ID}.api.sanity.io/v2021-10-21/data/query/${DATASET}?query=${QUERY}`;

// queries

// this is the CONTROLLER (selects queries based on the type of webpage)
// please review if you buy domain names!!

// mannn this took me a long time to come up with
let type = function typeMaker() {
  const currentUrl = window.location.pathname;
  const urlParts = currentUrl.split("/");
  const lastPart = urlParts[urlParts.length - 1];

  const types = {
  "etc": [1, 2, 3, 4, 5, 6, 7, 8],d
  "mecha": [1, 2, 3, 4, 5, 6, 7, 8],
  "civil": [1, 2, 3, 4, 5, 6, 7, 8],
  "pei": [1, 2, 3, 4, 5, 6, 7, 8]
  };

  for (const [prefix, suffixes] of Object.entries(types)) {
    for (const suffix of suffixes) {
      const expected = `${prefix}-${suffix}.html`;
      if (lastPart === expected) {
       return `${prefix}-${suffix}`;
      }
    }
  }
}
let typeValue = type();

/* The pages object is a collection of key-value pairs, where each key represents a category (e.g. "etc", "mecha", "civil")
and each value is an array of numbers (e.g. [1, 2, 3, 4, 5, 6, 7, 8]). The outer loop uses Object.entries() and destructuring
assignment to iterate over the entries in the pages object. On each iteration of the outer loop, prefix is assigned the
key (e.g. "etc", "mecha", "civil") and suffixes is assigned the value (e.g. [1, 2, 3, 4, 5, 6, 7, 8]). The inner loop uses
the for...of statement to iterate over the elements in the suffixes array. On each iteration of the inner loop, suffix is
assigned the current element (e.g. 1, 2, 3, etc.). For each combination of prefix and suffix, the code generates a URL string
using template literals and checks if the URL is included in the value of currentUrl. If the URL is found in currentUrl, the
code calls the function whose name is stored in the dynamic property of the window object. The name of the function is
generated by concatenating the prefix and suffix variables and prefixing the result with "query_". Finally, the break
statement is used to exit the inner loop if a match is found, so that the rest of the suffixes array does not get processed. 
*/

function queryQuestionPaper() {
  fetch(URL)
  .then((res) => res.json())
  .then(({ result }) => {

    let list = document.querySelector("ul");
    let firstListItem = document.querySelector("ul li");

    if (result.length > 0) {
      // remove the placeholder content
      list.removeChild(firstListItem);
      result.forEach((fuck) => { // I'm fuming at this point!

        if(fuck.type == typeValue) {
          let link = document.createElement('a');
          let linkItem = document.createElement("li");
  
          link.textContent = fuck.name;
          link.href= fuck.pdfUrl;
  
          linkItem.appendChild(link)
          list.appendChild(linkItem)
        }
      })
    }
  }).catch((err) => console.error(err));
}

if (window.location.pathname !== "/html/resources.html") {
  queryQuestionPaper();
}



// mannn this took me a long time to come up with
/* const currentUrl = window.location.href;
const pages = {
  "etc": [1, 2, 3, 4, 5, 6, 7, 8],
  "mecha": [1, 2, 3, 4, 5, 6, 7, 8],
  "civil": [1, 2, 3, 4, 5, 6, 7, 8]
};

for (const [prefix, suffixes] of Object.entries(pages)) { // On each iteration, prefix is assigned the key and suffixes is assigned the value
  for (const suffix of suffixes) {
    const url = `https://phukon.github.io/project-athena/${prefix}-${suffix}.html`;
    if (currentUrl.includes(url)) {
      window[`query_${prefix}${suffix}`]();
      break;
    }
  }
}
*/